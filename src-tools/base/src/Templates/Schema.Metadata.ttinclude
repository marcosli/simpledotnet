<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Data.SqlTypes" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Data.OleDb" #>
<#+
//
//  Schema.Metadata.DbSchema - http://dbschema.codeplex.com
//
//  The contents of this file are subject to the New BSD
//  License (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of
//  the License at http://www.opensource.org/licenses/bsd-license.php
//
//  Software distributed under the License is distributed on an
//  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  rights and limitations under the License.
//


	// Schema.Metadata.DbObject

    public abstract class DbObject
    {
        public IDbSchemaProvider Provider { get; protected set; }

        public DbObject(IDbSchemaProvider provider)
        {
            this.Provider = provider;
        }

        public DbObject(string connectionString, string provider) :
            this(GetSchemaProvider(connectionString, provider))
        {

        }

        public T GetValue<T>(DataRow row, string key)
        {
            return GetValue<T>(row, key, false);
        }

        public T GetValue<T>(DataRow row, string key, bool required)
        {
            if (!required && !row.Table.Columns.Contains(key)) return default(T);
            object value = row[key];
            if (value == DBNull.Value) return default(T);
            if (value is IConvertible && !(value is T)) return (T)Convert.ChangeType(value, typeof(T));
            else return (T)value;

        }

        private static DbSchemaProvider GetSchemaProvider(string connectionString, string providerName)
        {
            switch (providerName.ToLower())
            {
                case "system.data.sqlserverce.3.5":
                case "system.data.sqlserverce":
                    return new SqlServerCeSchemaProvider(connectionString, providerName);

                case "system.data.oledb":
                    return new OleDbSchemaProvider(connectionString, providerName);

                case "system.data.sqlclient":
                    return new SqlServerSchemaProvider(connectionString, providerName);

                case "mysql.data.mysqlclient":
                    return new MySqlSchemaProvider(connectionString, providerName);

                case "npgsql":
                    return new PostgreSqlSchemaProvider(connectionString, providerName);

                case "system.data.sqlite":
                    return new SQLiteSchemaProvider(connectionString, providerName);

                case "system.data.oracleclient":
                case "oracle.dataaccess.client":
                    return new OracleSchemaProvider(connectionString, providerName);

                case "vistadb.net20":
                    return new VistaDBSchemaProvider(connectionString, providerName);

                default:
                    throw new NotImplementedException("The provider '" + providerName + "' is not implemented!");

            }
        }
    }


	// Schema.Metadata.DbTable

    public class DbTable : DbObject
    {
        private IList<DbColumn> _columnCache = null;
        private IList<DbRelation> _outFkCache = null;
        private IList<DbRelation> _inFkCache = null;

        public DbTable(IDbSchemaProvider provider)
            : base(provider)
        {
        }

        public DbTable(IDbSchemaProvider provider, DataRow row)
            : this(provider)
        {
            TableCatalog = GetValue<string>(row, "TABLE_CATALOG");
            TableSchema = GetValue<string>(row, "TABLE_SCHEMA");
            TableName = GetValue<string>(row, "TABLE_NAME");
            TableType = GetValue<string>(row, "TABLE_TYPE");
        }

        public string TableCatalog { get; set; }
        public string TableSchema { get; set; }
        public string TableName { get; set; }
        public string TableType { get; set; }

        public string QualifiedTableName
        {
            get
            {
                return Provider.QualifiedTableName(this.TableSchema, this.TableName);
            }
        }

        #region ' Columns and Primary Keys '

        private IEnumerable<DbColumn> GetSchemaColumns()
        {
            foreach (DataRow row in Provider.GetTableColumns(TableSchema, TableName).Rows)
                yield return new DbColumn(Provider, row);
        }

        private IEnumerable<DbRelation> GetRelations(string type)
        {
            string where = string.Format(type + "_TABLE_NAME = '{0}' AND PK_ORDINAL_POSITION = FK_ORDINAL_POSITION", TableName);

            if (!string.IsNullOrEmpty(TableSchema))
                where += string.Format(" AND " + type + "_TABLE_SCHEMA = '{0}'", TableSchema);

            foreach (var row in Provider.GetConstraints().Select(where))
                yield return new DbRelation(Provider, row);
        }

        protected IEnumerable<DbColumn> AllColumns
        {
            //all columns including hidden
            get
            {
                if (_columnCache == null) _columnCache = GetSchemaColumns().ToList();
                return _columnCache;
            }
        }


        public IEnumerable<DbColumn> Columns
        {
            //all columns, except hidden
            get
            {
                return AllColumns.Where(x => !x.IsHidden);
            }
        }

        public IEnumerable<DbRelation> ManyToOneColumns
        {
            //all outgoing relations
            get
            {
                if (_outFkCache == null) _outFkCache = GetRelations("FK").ToList();
                return _outFkCache;
            }
        }

        public IEnumerable<DbRelation> OneToManyColumns
        {
            //all outgoing relations
            get
            {
                if (_inFkCache == null) _inFkCache = GetRelations("PK").ToList();
                return _inFkCache;
            }
        }

        public IEnumerable<DbColumn> PrimaryKeyColumns
        {
            //all primary key columns
            get
            {
                return Columns.Where(x => x.IsKey);
            }
        }

        public IEnumerable<DbColumn> GetKeyFields()
        {
            //all primary keys not included in a foreign key
            var excluded = new HashSet<string>(ManyToOneColumns.Select(x => x.FkColumnName));
            return PrimaryKeyColumns.Where(x => !excluded.Contains(x.ColumnName));
        }

        public IEnumerable<DbColumn> GetFields()
        {
            //all columns except primary keys and foreign keys
            var excluded = new HashSet<string>(
                PrimaryKeyColumns.Select(x => x.ColumnName).Union(
                ManyToOneColumns.Select(x => x.FkColumnName)));

            return Columns.Where(x => !excluded.Contains(x.ColumnName));
        }

        public IEnumerable<DbForeignKey> GetManyToOneFields()
        {
            //all foreign keys columns grouped by fk name
            HashSet<string> keys = new HashSet<string>(PrimaryKeyColumns.Select(x=>x.ColumnName));
            return ManyToOneColumns.GroupBy(x => x.FkName).Select(x => new DbForeignKey(Provider, x.Key, x.Any(y=>keys.Contains(y.FkColumnName)), x.ToList()));
        }

        public IEnumerable<DbForeignKey> GetOneToManyFields()
        {
            //all foreign keys columns grouped by fk name
            return OneToManyColumns.GroupBy(x => x.FkName).Select(x => new DbForeignKey(Provider, x.Key, false, x.ToList()));
        }


        #endregion

    }


	// Schema.Metadata.DbColumn

    public class DbColumn : DbObject
    {
        public DbColumn(IDbSchemaProvider provider) : base(provider) { }
        public DbColumn(IDbSchemaProvider provider, DataRow row)
            : this(provider)
        {
            AllowDBNull = GetValue<bool>(row, "AllowDBNull");
            BaseCatalogName = GetValue<string>(row, "BaseCatalogName");
            BaseColumnName = GetValue<string>(row, "BaseColumnName");
            BaseSchemaName = GetValue<string>(row, "BaseSchemaName");
            BaseTableName = GetValue<string>(row, "BaseTableName");
            ColumnName = GetValue<string>(row, "ColumnName");
            ColumnOrdinal = GetValue<int>(row, "ColumnOrdinal");
            ColumnSize = GetValue<int>(row, "ColumnSize");
            DataType = GetValue<Type>(row, "DataType");
            IsAutoIncrement = GetValue<bool>(row, "IsAutoIncrement");
            IsKey = GetValue<bool>(row, "IsKey");
            IsLong = GetValue<bool>(row, "IsLong");
            IsHidden = GetValue<bool>(row, "IsHidden");
            IsReadOnly = GetValue<bool>(row, "IsReadOnly");
            IsRowVersion = GetValue<bool>(row, "IsRowVersion");
            IsUnique = GetValue<bool>(row, "IsUnique");
            NumericPrecision = GetValue<int>(row, "NumericPrecision");
            NumericScale = GetValue<int>(row, "NumericScale");
            ProviderType = GetValue<string>(row, "ProviderType");
            DataTypeName = GetValue<string>(row, "DataTypeName");
        }

        public bool AllowDBNull { get; set; }
        public string BaseCatalogName { get; set; }
        public string BaseColumnName { get; set; }
        public string BaseSchemaName { get; set; }
        public string BaseTableName { get; set; }
        public string ColumnName { get; set; }
        public int ColumnOrdinal { get; set; }
        public int ColumnSize { get; set; }
        public Type DataType { get; set; }
        public string DataTypeName { get; set; }
        public bool IsAutoIncrement { get; set; }
        public bool IsKey { get; set; }
        public bool IsLong { get; set; }
        public bool IsHidden { get; set; }
        public bool IsReadOnly { get; set; }
        public bool IsRowVersion { get; set; }
        public bool IsUnique { get; set; }
        public int NumericPrecision { get; set; }
        public int NumericScale { get; set; }
        public string ProviderType { get; set; }

        public string GetDisplayTypeName()
        {
            return GetDisplayTypeName(false);
        }
        
        public string GetDisplayTypeName(bool forceNullable)
        {
            return DataType.Name + ((AllowDBNull || forceNullable) && DataType.IsValueType ? "?" : "");
        }
    }


	// Schema.Metadata.DbRelation

    public class DbRelation : DbObject
    {
        public DbRelation(IDbSchemaProvider provider) : base(provider) { }

        public DbRelation(IDbSchemaProvider provider, DataRow row) : this(provider)
        {
            PkTableCatalog = GetValue<string>(row, "PK_TABLE_CATALOG");
            PkTableSchema = GetValue<string>(row, "PK_TABLE_SCHEMA");
            PkTableName = GetValue<string>(row, "PK_TABLE_NAME");
            PkColumnName = GetValue<string>(row, "PK_COLUMN_NAME");

            FkTableCatalog = GetValue<string>(row, "FK_TABLE_CATALOG");
            FkTableSchema = GetValue<string>(row, "FK_TABLE_SCHEMA");
            FkTableName = GetValue<string>(row, "FK_TABLE_NAME");
            FkColumnName = GetValue<string>(row, "FK_COLUMN_NAME");

            FkName = GetValue<string>(row, "FK_NAME");
        }

        public string PkTableCatalog { get; set; }
        public string PkTableSchema { get; set; }
        public string PkTableName { get; set; }
        public string PkColumnName { get; set; }
        
        public string FkTableCatalog { get; set; }
        public string FkTableSchema { get; set; }
        public string FkTableName { get; set; }
        public string FkColumnName { get; set; }

        public string FkName { get; set; }
    }


	// Schema.Metadata.DbForeignKey

    public class DbForeignKey : DbObject
    {
        public string FkName { get; set; }
        public bool IsKey { get; set; }
        public IList<DbRelation> Columns { get; protected set; }

        public DbForeignKey(IDbSchemaProvider provider) : base(provider) { }

        public DbForeignKey(IDbSchemaProvider provider, string name, bool isKey, IList<DbRelation> columns)
            : this(provider)
        {
            this.Columns = columns;
            this.FkName = name;
            this.IsKey = isKey;
        }
    }


	// Schema.Metadata.DbSchema

    public class DbSchema : DbObject
    {
        private DataTable _tableCache = null;
        public DbSchema(string connectionString, string provider)
            : base(connectionString, provider)
        {
        }

        private DataTable GetSchemaTables()
        {
            if (_tableCache != null) return _tableCache;
            return _tableCache = Provider.GetSchemaTables();
        }

        public IEnumerable<DbTable> GetTables()
        {
            return GetTables("%");
        }

        public IEnumerable<DbTable> GetTables(params string[] included)
        {
            return GetTables(included, new string[] { });
        }

        public IEnumerable<DbTable> GetTables(IList<string> included, IList<string> excluded)
        {
            return GetGeneric(included, excluded, "TABLE", "BASE TABLE");
        }

        public IEnumerable<DbTable> GetViews()
        {
            return GetViews("%");
        }

        public IEnumerable<DbTable> GetViews(params string[] included)
        {
            return GetViews(included, new string[] { });
        }

        public IEnumerable<DbTable> GetViews(IList<string> included, IList<string> excluded)
        {
            return GetGeneric(included, excluded, "VIEW");
        }

        public IEnumerable<DbTable> GetGeneric(IList<string> included, IList<string> excluded, params string[] types)
        {
            var incString = included.Count > 0 ?
                string.Join(" OR ", included.Select(x => GetTableWhereClause("LIKE", x)).ToArray()) :
                "1=1";

            var excString = excluded.Count > 0 ?
                string.Join(" AND ", excluded.Select(x => GetTableWhereClause("NOT LIKE", x)).ToArray()) :
                "1=1";

            var typesString = types.Length > 0 ?
                string.Join(" OR ", types.Select(x => "TABLE_TYPE = '" + x + "'").ToArray()) :
                "1=1";

            foreach (var row in GetSchemaTables().Select(string.Format("({0}) AND ({1}) AND ({2})", incString, excString, typesString)))
                yield return new DbTable(Provider, row);
        }

        protected string GetTableWhereClause(string op, string tableName)
        {
            var columns = new[] { "TABLE_NAME", "TABLE_SCHEMA", "TABLE_CATALOG" };
            var names = tableName.Split('.').Reverse().ToList();

            var clauses = new List<string>();
            for (int i = 0; i < columns.Length && i < names.Count; i++)
                clauses.Add(string.Format("{0} {1} '{2}'", columns[i], op, names[i]));

            return "(" + string.Join(" AND ", clauses.ToArray()) + ")";
        }

        #region ' Helpers '

        public DbType GetDbColumnType(string providerDbType)
        {
            return Provider.GetDbColumnType(providerDbType);
        }

        public string GetDatabaseName()
        {
            return Provider.GetDatabaseName();
        }

        #endregion

    }


	// Schema.Metadata.IDbSchemaProvider

    public interface IDbSchemaProvider
    {
        string GetDatabaseName();
        DataTable GetSchemaTables();
        DataTable GetTableColumns(string tableSchema, string tableName);
        DataTable GetConstraints();
        DataTable GetProcedures();
        DataTable GetProcedureParameters(string procedureSchema, string procedureName);
        DbType GetDbColumnType(string providerDbType);
        string QualifiedTableName(string tableSchema, string tableName);
    }


	// Schema.Metadata.DbSchemaProvider

    abstract public class DbSchemaProvider : IDbSchemaProvider
    {
        private string _ConnectionString;
        private string _ProviderName;

        protected string ProviderName
        {
            get { return _ProviderName; }
        }

        public DbSchemaProvider(string connectionstring, string providername)
        {
            _ConnectionString = connectionstring;
            _ProviderName = providername;
        }

        #region ' IDbProvider Members '

        virtual public string GetDatabaseName()
        {
            string DatabaseName = string.Empty;
            using (DbConnection _Connection = GetDBConnection())
            {
                DatabaseName = _Connection.Database;
            }
            return DatabaseName;
        }

        virtual public DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }

            return tbl;
        }

        virtual public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            DataTable tbl = new DataTable();

            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = string.Format("SELECT * FROM {0}", QualifiedTableName(tableSchema, tableName));
                _Command.CommandType = CommandType.Text;

                System.Console.WriteLine("SQL: " + _Command.CommandText);
                tbl = _Command.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
            }
            return tbl;
        }

        abstract public DataTable GetConstraints();

        virtual public string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("[{0}].[{1}]", tableSchema, tableName);
            else
                return string.Format("[{0}]", tableName);
        }

        virtual public DataTable GetProcedures()
        {
            DataTable tbl = new DataTable("Procedures");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Procedures");
            }

            return tbl;
        }

        virtual public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            #region ' Decapated Code '
            //DataTable tbl = new DataTable("ProcedureParameters");
            //using (DbConnection _Connection = GetDBConnection())
            //{
            //    string[] restrictions = new string[4] { null, procedureSchema, procedureName, null };
            //    tbl = _Connection.GetSchema("ProcedureParameters", restrictions);
            //}
            //return tbl;
            #endregion

            DataTable tbl = GetDTSchemaProcedureParameters();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = this.QualifiedTableName(procedureSchema, procedureName);
                _Command.CommandType = CommandType.StoredProcedure;

                DbParameter par = _Command.CreateParameter();

                DbProviderFactory pf = DbProviderFactories.GetFactory(this.ProviderName);
                DbCommandBuilder cb = pf.CreateCommandBuilder();
                MethodInfo theMethod = cb.GetType().GetMethod("DeriveParameters");
                theMethod.Invoke(cb, new object[] { _Command });

                int counter = 1;
                foreach (DbParameter p in _Command.Parameters)
                {
                    if (p.ParameterName != "@RETURN_VALUE")
                    {
                        DataRow parameterRow = tbl.NewRow();
                        if (!string.IsNullOrEmpty(procedureSchema))
                            parameterRow["SPECIFIC_SCHEMA"] = procedureSchema;
                        parameterRow["SPECIFIC_NAME"] = procedureName;
                        parameterRow["PARAMETER_NAME"] = p.ParameterName;
                        parameterRow["ORDINAL_POSITION"] = counter;
                        parameterRow["PARAMETER_MODE"] = p.Direction;
                        parameterRow["IS_RESULT"] = p.Direction == ParameterDirection.ReturnValue;
                        parameterRow["DATA_TYPE"] = p.DbType;
                        parameterRow["CHARACTER_MAXIMUM_LENGTH"] = p.Size;

                        tbl.Rows.Add(parameterRow);
                        counter++;
                    }
                }
            }

            return tbl;
        }

       

        abstract public DbType GetDbColumnType(string providerDbType);

        #endregion

        #region ' Helper functions '

        internal DbConnection GetDBConnection()
        {
            DbProviderFactory providerFactory = DbProviderFactories.GetFactory(_ProviderName);
            DbConnection _Connection = providerFactory.CreateConnection();
            _Connection.ConnectionString = _ConnectionString;
            _Connection.Open();
            return _Connection;
        }

        protected DataTable GetDTSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            tbl.Columns.Add("TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("TABLE_TYPE", typeof(System.String));
            tbl.Columns.Add("TABLE_GUID", typeof(System.Guid));
            tbl.Columns.Add("DESCRIPTION", typeof(System.String));
            tbl.Columns.Add("TABLE_PROPID", typeof(System.Int32));
            tbl.Columns.Add("DATE_CREATED", typeof(System.DateTime));
            tbl.Columns.Add("DATE_MODIFIED", typeof(System.DateTime));

            return tbl;
        }

        protected DataTable GetDTSchemaConstrains()
        {
            DataTable tbl = new DataTable("Constraints");
            tbl.Columns.Add("PK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("PK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("PK_ORDINAL_POSITION", typeof(System.String));
            tbl.Columns.Add("PK_NAME", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("FK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("FK_ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("FK_NAME", typeof(System.String));

            return tbl;
        }

        protected DataTable GetDTSchemaProcedures()
        {
            DataTable tbl = new DataTable("Procedures");
            tbl.Columns.Add(new DataColumn("SPECIFIC_CATALOG", typeof(string)));
            tbl.Columns.Add(new DataColumn("SPECIFIC_SCHEMA", typeof(string)));
            tbl.Columns.Add(new DataColumn("SPECIFIC_NAME", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_CATALOG", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_SCHEMA", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_NAME", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_TYPE", typeof(string))); 
            tbl.Columns.Add(new DataColumn("CREATED", typeof(DateTime)));
            tbl.Columns.Add(new DataColumn("LAST_ALTERED", typeof(DateTime)));

            return tbl;
        }

        protected DataTable GetDTSchemaProcedureParameters()
        {
            DataTable tbl = new DataTable("ProcedureParameters");
            tbl.Columns.Add("SPECIFIC_CATALOG", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_SCHEMA", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_NAME", typeof(System.String));
            tbl.Columns.Add("PARAMETER_NAME", typeof(System.String));
            tbl.Columns.Add("ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("PARAMETER_MODE", typeof(ParameterDirection));
            tbl.Columns.Add("IS_RESULT", typeof(System.Boolean));
            tbl.Columns.Add("DATA_TYPE", typeof(System.Data.DbType));
            tbl.Columns.Add("CHARACTER_MAXIMUM_LENGTH", typeof(System.Int32));
            tbl.Columns.Add("NUMERIC_PRECISION", typeof(System.Int16));
            tbl.Columns.Add("NUMERIC_SCALE", typeof(System.Int32));
            tbl.Columns.Add("DATETIME_PRECISION", typeof(System.Int16));

            return tbl;
        }

        #endregion

    }


	// system.data.sqlclient

    class SqlServerSchemaProvider : DbSchemaProvider
    {
        public SqlServerSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "0":   // SqlDbType.BigInt
                    return DbType.Int64;

                case "1":   // SqlDbType.Binary
                case "7":   // SqlDbType.Image
                case "19":  // SqlDbType.Timestamp
                case "21":  // SqlDbType.VarBinary
                    return DbType.Binary;

                case "2":   // SqlDbType.Bit
                    return DbType.Boolean;

                case "3":   // SqlDbType.Char
                    return DbType.AnsiStringFixedLength;

                case "4":   // SqlDbType.DateTime
                case "15":  // SqlDbType.SmallDateTime
                    return DbType.DateTime;

                case "5":   // SqlDbType.Decimal
                    return DbType.Decimal;

                case "6":   // SqlDbType.Float
                    return DbType.Double;

                case "8":   // SqlDbType.Int
                    return DbType.Int32;

                case "9":   // SqlDbType.Money
                case "17":  // SqlDbType.SmallMoney
                    return DbType.Currency;

                case "10":  // SqlDbType.NChar
                    return DbType.StringFixedLength;

                case "11":  // SqlDbType.NText
                case "12":  // SqlDbType.NVarChar 
                    return DbType.String;

                case "13":  // SqlDbType.Real:
                    return DbType.Single;

                case "14":  // SqlDbType.UniqueIdentifier:
                    return DbType.Guid;

                case "16":  // SqlDbType.SmallInt:
                    return DbType.Int16;

                case "18":  // SqlDbType.Text:
                case "22":  // SqlDbType.VarChar:
                    return DbType.AnsiString;

                case "20":  // SqlDbType.TinyInt:
                    return DbType.Byte;

                default:
                    return DbType.AnsiString;
            }

        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // SQL Server: find database constrains
        //
        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME, " +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
            "		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
            "		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
            "		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
            "		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }


	// system.data.sqlserverce.3.5

    public class SqlServerCeSchemaProvider : DbSchemaProvider
    {
        public SqlServerCeSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override string GetDatabaseName()
        {
            string DatabaseName = string.Empty;
            using (DbConnection _Connection = GetDBConnection())
            {
                Regex RegExp = new Regex(@"\\(?<db>[^\\]*)?\.sdf$", RegexOptions.IgnoreCase);
                if (RegExp.IsMatch(_Connection.Database))
                {
                    Match found = RegExp.Matches(_Connection.Database)[0];
                    DatabaseName = found.Groups[1].Value;
                }
            }
            return DatabaseName;
        }

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = GetDTSchemaTables();

            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlTables;
                _Command.CommandType = CommandType.Text;
                DbDataReader results = _Command.ExecuteReader();
                while (results.Read())
                {
                    DataRow valuesRow = tbl.NewRow();
                    if (results[0] != DBNull.Value)
                        valuesRow[0] = results.GetString(0);
                    if (results[1] != DBNull.Value)
                        valuesRow[1] = results.GetString(1);
                    if (results[2] != DBNull.Value)
                        valuesRow[2] = results.GetString(2);
                    if (results[3] != DBNull.Value)
                        valuesRow[3] = results.GetString(3);
                    if (results[5] != DBNull.Value)
                        valuesRow[5] = results.GetString(5);
                    if (results[7] != DBNull.Value)
                        valuesRow[7] = results.GetDateTime(7);
                    if (results[8] != DBNull.Value)
                        valuesRow[8] = results.GetDateTime(8);
                    tbl.Rows.Add(valuesRow);
                }
                results.Close();
            }

            return tbl;
        }

        public override DataTable GetConstraints()
        {
            DataTable tbl = GetDTSchemaConstrains();
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                DbDataReader results = _Command.ExecuteReader();
                while (results.Read())
                {
                    DataRow valuesRow = tbl.NewRow();
                    if (results[0] != DBNull.Value)
                        valuesRow[0] = results.GetString(0);
                    if (results[1] != DBNull.Value)
                        valuesRow[1] = results.GetString(1);
                    if (results[2] != DBNull.Value)
                        valuesRow[2] = results.GetString(2);
                    if (results[3] != DBNull.Value)
                        valuesRow[3] = results.GetString(3);
                    if (results[4] != DBNull.Value)
                        valuesRow[4] = results.GetInt32(4);
                    if (results[5] != DBNull.Value)
                        valuesRow[5] = results.GetString(5);
                    if (results[6] != DBNull.Value)
                        valuesRow[6] = results.GetString(6);
                    if (results[7] != DBNull.Value)
                        valuesRow[7] = results.GetString(7);
                    if (results[8] != DBNull.Value)
                        valuesRow[8] = results.GetString(8);
                    if (results[9] != DBNull.Value)
                        valuesRow[9] = results.GetString(9);
                    if (results[10] != DBNull.Value)
                        valuesRow[10] = results.GetInt32(10);
                    if (results[11] != DBNull.Value)
                        valuesRow[11] = results.GetString(11);

                    tbl.Rows.Add(valuesRow);
                }
                results.Close();
            }

            return tbl;
        }

        public override DataTable GetProcedures()
        {
            return GetDTSchemaProcedures();
        }

        public override DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            return GetDTSchemaProcedureParameters();
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType.ToLower())
            {
                case "bigint":
                    return DbType.Int64;

                case "binary":
                case "image":
                case "timestamp":
                case "varbinary":
                case "rowversion":
                    return DbType.Binary;

                case "bit":
                    return DbType.Boolean;

                case "char":
                    return DbType.AnsiStringFixedLength;

                case "datetime":
                case "smalldatetime":
                    return DbType.DateTime;

                case "decimal":
                    return DbType.Decimal;

                case "float":
                    return DbType.Double;

                case "int":
                    return DbType.Int32;

                case "money":
                case "smallmoney":
                    return DbType.Currency;

                case "nchar":
                    return DbType.StringFixedLength;

                case "ntext":
                case "nvarchar":
                    return DbType.String;

                case "real":
                    return DbType.Single;

                case "uniqueidentifier":
                    return DbType.Guid;

                case "smallint":
                    return DbType.Int16;

                case "text":
                case "varchar":
                    return DbType.AnsiString;

                case "tinyint":
                    return DbType.Byte;

                default:
                    return DbType.AnsiString;
            }
        }

        #endregion

        #region ' SqlServerCe code: database constrains '
        //
        // SQL Server Compact: find tables and database constrains
        //
        const string sqlTables =
            "SELECT * " +
            "FROM INFORMATION_SCHEMA.TABLES";

        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME," +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME, " +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME, " +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION, " +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }


	// mysql.data.mysqlclient

    public class MySqlSchemaProvider : DbSchemaProvider
    {
        public MySqlSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }
            using (DbConnection _Connection = GetDBConnection())
            {
                DataTable tblViews = _Connection.GetSchema("Views");
                foreach (DataRow viewRow in tblViews.Rows)
                {
                    DataRow tblRow = tbl.NewRow();
                    if (viewRow["TABLE_CATALOG"] != DBNull.Value)
                        tblRow["TABLE_CATALOG"] = viewRow["TABLE_CATALOG"];
                    tblRow["TABLE_SCHEMA"] = viewRow["TABLE_SCHEMA"];
                    tblRow["TABLE_NAME"] = viewRow["TABLE_NAME"];
                    tblRow["TABLE_TYPE"] = "VIEW";

                    tbl.Rows.Add(tblRow);
                }
            }

            return tbl;
        }

        public override DataTable GetConstraints()
        {
            DataTable tbl = GetDTSchemaConstrains();

            using (DbConnection _Connection = this.GetDBConnection())
            {
                if (_Connection.ServerVersion.StartsWith("5."))
                {
                    DbCommand _Command = _Connection.CreateCommand();
                    _Command.CommandText = sqlConstraints;
                    _Command.CommandType = CommandType.Text;
                    tbl.Load(_Command.ExecuteReader());
                }
                else
                {
                    DataTable tblConstraints = _Connection.GetSchema("Foreign Key Columns");
                    foreach (DataRow constraintRow in tblConstraints.Rows)
                    {
                        DataRow constraint = tbl.NewRow();
                        if (constraintRow["REFERENCED_TABLE_CATALOG"] != DBNull.Value)
                            constraint["PK_TABLE_CATALOG"] = constraintRow["REFERENCED_TABLE_CATALOG"];
                        constraint["PK_TABLE_SCHEMA"] = constraintRow["REFERENCED_TABLE_SCHEMA"];
                        constraint["PK_TABLE_NAME"] = constraintRow["REFERENCED_TABLE_NAME"];
                        constraint["PK_COLUMN_NAME"] = constraintRow["REFERENCED_COLUMN_NAME"];
                        //constraint["PK_ORDINAL_POSITION"] = constraintRow[""];
                        //constraint["PK_NAME"] = constraintRow[""];

                        if (constraintRow["TABLE_CATALOG"] != DBNull.Value)
                            constraint["FK_TABLE_CATALOG"] = constraintRow["TABLE_CATALOG"];
                        constraint["FK_TABLE_SCHEMA"] = constraintRow["TABLE_SCHEMA"];
                        constraint["FK_TABLE_NAME"] = constraintRow["TABLE_NAME"];
                        constraint["FK_COLUMN_NAME"] = constraintRow["COLUMN_NAME"];
                        constraint["FK_ORDINAL_POSITION"] = constraintRow["ORDINAL_POSITION"];
                        constraint["FK_NAME"] = constraintRow["CONSTRAINT_NAME"];

                        tbl.Rows.Add(constraint);
                    }

                }
            }
            return tbl;
        }

        public override string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("`{0}`.`{1}`", tableSchema, tableName);
            else
                return string.Format("`{0}`", tableName);
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "0":   // MySqlDbType.Decimal
                case "246": // MySqlDbType.NewDecimal
                    return DbType.Decimal;

                case "1":   // MySqlDbType.Byte
                    return DbType.SByte;

                case "2":   // MySqlDbType.Int16
                    return DbType.Int16;

                case "3":   // MySqlDbType.Int32
                case "9":   // MySqlDbType.Int24
                    return DbType.Int32;

                case "4":   // MySqlDbType.Float
                    return DbType.Single;

                case "5":   // MySqlDbType.Double
                    return DbType.Double;

                case "7":   // MySqlDbType.Timestamp
                case "12":  // MySqlDbType.DateTime
                    return DbType.DateTime;

                case "8":   // MySqlDbType.Int64
                    return DbType.Int64;

                case "10":  // MySqlDbType.Date
                case "13":  // MySqlDbType.Year
                case "14":  // MySqlDbType.Newdate
                    return DbType.Date;

                case "11":  // MySqlDbType.Time
                    return DbType.Time;

                case "16":  // MySqlDbType.Bit
                case "508": // MySqlDbType.UInt64
                    return DbType.UInt64;

                case "249": // MySqlDbType.TinyBlob
                case "250": // MySqlDbType.MediumBlob
                case "251": // MySqlDbType.LongBlob
                case "252": // MySqlDbType.Blob
                    return DbType.Binary;

                case "254": // MySqlDbType.String
                    return DbType.StringFixedLength;

                case "247": // MySqlDbType.Enum
                    return DbType.String;

                case "248": // MySqlDbType.Set
                case "253": // MySqlDbType.VarChar
                case "750": // MySqlDbType.MediumText
                case "749": // MySqlDbType.TinyText
                case "751": // MySqlDbType.LongText
                case "752": // MySqlDbType.Text
                    return DbType.String;

                case "501": // MySqlDbType.UByte
                    return DbType.Byte;

                case "502": // MySqlDbType.UInt16
                    return DbType.UInt16;

                case "503": // MySqlDbType.UInt32
                case "509": // MySqlDbType.UInt24
                    return DbType.UInt32;

                default:
                    return DbType.AnsiString;
            }
        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // MySQL Server: find database constrains
        //
        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME," +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (KCUC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA" +
            "  AND KCUC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME" +
            "  AND KCUC.TABLE_NAME = RC.TABLE_NAME)" +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (KCUUC.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA" +
            "  AND KCUUC.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME" +
            "  AND KCUUC.TABLE_NAME = RC.REFERENCED_TABLE_NAME)";

        #endregion

    }


	// system.data.oledb

    public class OleDbSchemaProvider : DbSchemaProvider
    {
        public OleDbSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (OleDbConnection OleDbConn = (OleDbConnection)GetDBConnection())
            {
                tbl = OleDbConn.GetOleDbSchemaTable(OleDbSchemaGuid.Foreign_Keys, new object[] { });
            }

            return tbl;
        }

        /// <summary>
        /// Converts ProviderType from GetSchemaTable()'s columns in DbType
        /// </summary>
        /// <remarks>
        /// Using as a guide:
        /// http://msdn.microsoft.com/en-us/library/system.data.oledb.oledbtype.aspx
        /// </remarks>
        /// <param name="providerDbType">ProviderType Column</param>
        /// <returns>DbType equilevent</returns>
        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "20":  // OleDbType.BigInt
                    return DbType.Int64;

                case "128": // OleDbType.Binary
                    return DbType.Binary;

                case "11":  // OleDbType.Boolean
                    return DbType.Boolean;

                case "8":   // OleDbType.BSTR
                    return DbType.String;

                case "129": // OleDbType.Char
                    return DbType.AnsiStringFixedLength;

                case "6":   // OleDbType.Currency
                    return DbType.Currency;

                case "7":   // OleDbType.Date
                    return DbType.DateTime;

                case "133": // OleDbType.DBDate
                    return DbType.DateTime;

                case "134": // OleDbType.DBTime
                    return DbType.Time;

                case "135": // OleDbType.DBTimeStamp
                    return DbType.DateTime;

                case "14":  // OleDbType.Decimal
                    return DbType.Decimal;

                case "5":   // OleDbType.Double
                    return DbType.Double;

                case "0":   // OleDbType.Empty
                    return DbType.Object;

                case "10":  // OleDbType.Error
                    return DbType.Object;

                case "64":  // OleDbType.Filetime
                    return DbType.DateTime;

                case "72":  // OleDbType.Guid
                    return DbType.Guid;

                case "9":   // OleDbType.IDispatch
                    return DbType.Object;

                case "3":   // OleDbType.Integer
                    return DbType.Int32;

                case "13":  // OleDbType.IUnknown
                    return DbType.Object;

                case "205": // OleDbType.LongVarBinary
                    return DbType.Binary;

                case "201": // OleDbType.LongVarChar
                    return DbType.AnsiString;

                case "203": // OleDbType.LongVarWChar
                    return DbType.String;

                case "131": // OleDbType.Numeric
                    return DbType.Decimal;

                case "138": // OleDbType.PropVariant
                    return DbType.Object;

                case "4":   // OleDbType.Single
                    return DbType.Single;

                case "2":   // OleDbType.SmallInt
                    return DbType.Int16;

                case "16":  // OleDbType.TinyInt
                    return DbType.SByte;

                case "21":  // OleDbType.UnsignedBigInt
                    return DbType.UInt64;

                case "19":  // OleDbType.UnsignedInt
                    return DbType.UInt32;

                case "18":  // OleDbType.UnsignedSmallInt
                    return DbType.UInt16;

                case "17":  // OleDbType.UnsignedTinyInt
                    return DbType.Byte;

                case "204": // OleDbType.VarBinary
                    return DbType.Binary;

                case "200": // OleDbType.VarChar
                    return DbType.AnsiString;

                case "12":  // OleDbType.Variant
                    return DbType.Object;

                case "139": // OleDbType.VarNumeric
                    return DbType.Decimal;

                case "202": // OleDbType.VarWChar
                    return DbType.String;

                case "130": // OleDbType.WChar
                    return DbType.StringFixedLength;


                default:
                    return DbType.AnsiString;
            }
        }

        #endregion


    }


	// npgsql

    class PostgreSqlSchemaProvider : DbSchemaProvider
    {
        public PostgreSqlSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = GetDTSchemaTables();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlTables;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }
            return tbl;
        }

        public override DataTable GetProcedures()
        {
            DataTable tbl = GetDTSchemaProcedures();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlProcedures;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "1":	// NpgsqlDbType.Bigint
                    return DbType.Int64;

                case "2":	// NpgsqlDbType.Boolean
                    return DbType.Boolean;

                case "3":	// NpgsqlDbType.Box
                case "5":	// NpgsqlDbType.Circle
                case "10":	// NpgsqlDbType.Line
                case "11":	// NpgsqlDbType.LSeg
                case "14":	// NpgsqlDbType.Path                            
                case "15":	// NpgsqlDbType.Point
                case "16":	// NpgsqlDbType.Polygon
                case "24":	// NpgsqlDbType.Inet
                case "25":	// NpgsqlDbType.Bit
                case "30":	// NpgsqlDbType.Interval
                case "-2147483648":	// NpgsqlDbType.Array
                    return DbType.Object;

                case "4":	// NpgsqlDbType.Bytea
                    return DbType.Binary;

                case "6":	// NpgsqlDbType.Char
                case "29":	// NpgsqlDbType.Oidvector
                    return DbType.String;

                case "7":	// NpgsqlDbType.Date
                    return DbType.Date;

                case "8":	// NpgsqlDbType.Double
                    return DbType.Double;

                case "9":	// NpgsqlDbType.Integer
                    return DbType.Int32;

                case "12":	// NpgsqlDbType.Money
                    return DbType.Currency;

                case "13":	// NpgsqlDbType.Numeric
                    return DbType.Decimal;

                case "17":	// NpgsqlDbType.Real
                    return DbType.Single;

                case "18":	// NpgsqlDbType.Smallint
                    return DbType.Int16;

                case "19":	// NpgsqlDbType.Text
                case "22":	// NpgsqlDbType.Varchar
                case "23":	// NpgsqlDbType.Refcursor
                    return DbType.String;

                case "20":	// NpgsqlDbType.Time
                case "31":	// NpgsqlDbType.TimeTZ
                    return DbType.Time;

                case "21":	// NpgsqlDbType.Timestamp
                case "26":	// NpgsqlDbType.TimestampTZ
                    return DbType.DateTime;

                case "27":	// NpgsqlDbType.Uuid
                    return DbType.Guid;

                case "28":	// NpgsqlDbType.Xml
                    return DbType.Xml;

                default:
                    return DbType.AnsiString;
            }
        }

        public override string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("{0}.{1}", DoubleQuoteIfNeeded(tableSchema), DoubleQuoteIfNeeded(tableName));
            else
                return string.Format("{0}", DoubleQuoteIfNeeded(tableName));
        }

        private string DoubleQuoteIfNeeded(string variable)
        {
            if (variable.IndexOf(' ') > -1)
                return string.Format("\"{0}\"", variable);
            else
                return variable;
        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // PostgreSQL Server: find database constrains
        //
        const string sqlTables =
            "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE " +
            "FROM INFORMATION_SCHEMA.TABLES " +
            "WHERE (TABLE_SCHEMA <> 'pg_catalog') AND (TABLE_SCHEMA <> 'information_schema') " +
            "ORDER BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME";

        const string sqlProcedures =
            "SELECT SPECIFIC_CATALOG, SPECIFIC_SCHEMA, SPECIFIC_NAME, ROUTINE_CATALOG, ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE, CREATED, LAST_ALTERED " +
            "FROM INFORMATION_SCHEMA.ROUTINES " +
            "WHERE (SPECIFIC_SCHEMA <> 'pg_catalog') AND (SPECIFIC_SCHEMA <> 'information_schema') " +
            "ORDER BY SPECIFIC_CATALOG, SPECIFIC_SCHEMA, SPECIFIC_NAME";

        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME, " +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
            "		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
            "		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
            "		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
            "		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }


	// system.data.sqlite

    class SQLiteSchemaProvider : DbSchemaProvider
    {

        public SQLiteSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = GetDTSchemaConstrains();
            using (DbConnection _Connection = GetDBConnection())
            {
                DataTable Constraints = _Connection.GetSchema("ForeignKeys");
                foreach (DataRow contrainRow in Constraints.Rows)
                {
                    DataRow constrain = tbl.NewRow();
                    if (contrainRow["FKEY_TO_CATALOG"] != DBNull.Value)
                        constrain["PK_TABLE_CATALOG"] = contrainRow["FKEY_TO_CATALOG"];
                    if (contrainRow["FKEY_TO_SCHEMA"] != DBNull.Value)
                        constrain["PK_TABLE_SCHEMA"] = contrainRow["FKEY_TO_SCHEMA"];
                    constrain["PK_TABLE_NAME"] = contrainRow["FKEY_TO_TABLE"];
                    constrain["PK_COLUMN_NAME"] = contrainRow["FKEY_TO_COLUMN"];
                    if (contrainRow["TABLE_CATALOG"] != DBNull.Value)
                        constrain["FK_TABLE_CATALOG"] = contrainRow["TABLE_CATALOG"];
                    if (contrainRow["TABLE_SCHEMA"] != DBNull.Value)
                        constrain["FK_TABLE_SCHEMA"] = contrainRow["TABLE_SCHEMA"];
                    constrain["FK_TABLE_NAME"] = contrainRow["TABLE_NAME"];
                    constrain["FK_COLUMN_NAME"] = contrainRow["FKEY_FROM_COLUMN"];
                    constrain["FK_ORDINAL_POSITION"] = contrainRow["FKEY_FROM_ORDINAL_POSITION"];
                    constrain["FK_NAME"] = contrainRow["CONSTRAINT_NAME"];

                    tbl.Rows.Add(constrain);
                }
            }

            return tbl;
        }

        /// <summary>
        /// For a given database type, returns a closest-match DbType.
        /// According SQLite SQLiteConvert :: internal static DbType TypeNameToDbType(string Name)
        /// </summary>
        /// <param name="providerDbType">The name of the type to match</param>
        /// <returns>DbType the text evaluates to</returns>
        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType.ToUpper())
            {
                case "1":
                    return DbType.Binary;

                case "2":
                    return DbType.Byte;

                case "3":
                    return DbType.Boolean;

                case "4":
                    return DbType.Guid;

                case "6":
                    return DbType.DateTime;

                case "7":
                    return DbType.Decimal;

                case "8":
                    return DbType.Double;

                case "10":
                    return DbType.Int16;

                case "11":
                    return DbType.Int32;

                case "12":
                    return DbType.Int64;

                case "15":
                    return DbType.Single;

                case "16":
                    return DbType.String;

                default:
                    return DbType.Object;
            }
        }

        public override DataTable GetProcedures()
        {
            return GetDTSchemaProcedures();
        }

        public override DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            return GetDTSchemaProcedureParameters();
        }

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }
            using (DbConnection _Connection = GetDBConnection())
            {
                DataTable tblViews = _Connection.GetSchema("Views");
                foreach (DataRow viewRow in tblViews.Rows)
                {
                    DataRow tblRow = tbl.NewRow();
                    if (viewRow["TABLE_CATALOG"] != DBNull.Value)
                        tblRow["TABLE_CATALOG"] = viewRow["TABLE_CATALOG"];
                    if (viewRow["TABLE_SCHEMA"] != DBNull.Value)
                        tblRow["TABLE_SCHEMA"] = viewRow["TABLE_SCHEMA"];
                    tblRow["TABLE_NAME"] = viewRow["TABLE_NAME"];
                    tblRow["TABLE_TYPE"] = "VIEW";

                    tbl.Rows.Add(tblRow);
                }
            }

            return tbl;
        }

        #endregion

    }


	// system.data.oracleclient

    class OracleSchemaProvider : DbSchemaProvider
    {
        public OracleSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetSchemaTables()
        {
            DataTable tblTables = base.GetDTSchemaTables();
            DataTable tblViews = GetDTSchemaTables();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlTables;
                _Command.CommandType = CommandType.Text;
                tblTables.Load(_Command.ExecuteReader());
            }
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlViews;
                _Command.CommandType = CommandType.Text;
                tblViews.Load(_Command.ExecuteReader());
            }
            foreach (DataRow viewRow in tblViews.Rows)
            {
                tblTables.ImportRow(viewRow);
            }

            return tblTables;
        }

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstrains;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DataTable GetProcedures()
        {
            DataTable tblProcedures = new DataTable("Procedures");
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlProcedures;
                _Command.CommandType = CommandType.Text;
                tblProcedures.Load(_Command.ExecuteReader());
            }

            return tblProcedures;
        }

        public override DataTable GetTableColumns(string tableSchema, string tableName)
        {
            var table1 = base.GetTableColumns(tableSchema, tableName);
            table1.Columns.Add("DataTypeName");

            using (var db = GetDBConnection())
            {
                var table2 = db.GetSchema("Columns", new[] { tableSchema, tableName })
                    .Rows.OfType<DataRow>().ToDictionary(x => (string)x["COLUMN_NAME"]);

                foreach (DataRow row in table1.Rows)
                {
                    row["DataTypeName"] = table2[(string)row["ColumnName"]]["DATATYPE"];
                }
            }
            return table1;
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "1":   // BFile
                    return DbType.Binary;

                case "2":   // Blob
                    return DbType.Binary;

                case "3":   // Char
                    return DbType.AnsiStringFixedLength;

                case "4":   // Clob
                    return DbType.AnsiString;

                case "5":   // Cursor
                    return DbType.Object;

                case "6":   // DateTime
                    return DbType.DateTime;

                case "7":   // IntervalDayToSecond
                    return DbType.Object;

                case "8":   // IntervalYearToMonth
                    return DbType.Int32;

                case "9":   // LongRaw
                    return DbType.Binary;

                case "10":  // LongVarChar
                    return DbType.AnsiString;

                case "11":  // NChar
                    return DbType.StringFixedLength;

                case "12":  // NClob
                    return DbType.String;

                case "13":  // Number
                    return DbType.VarNumeric;

                case "14":  // NVarChar
                    return DbType.String;

                case "15":  // Raw
                    return DbType.Binary;

                case "16":  // RowId
                    return DbType.AnsiString;

                case "18":  // Timestamp
                    return DbType.DateTime;

                case "19":  // TimestampLocal
                    return DbType.DateTime;

                case "20":  // TimestampWithTZ
                    return DbType.DateTime;

                case "22":  // VarChar
                    return DbType.AnsiString;

                case "23":  // Byte
                    return DbType.Byte;

                case "24":  // UInt16
                    return DbType.UInt16;

                case "25":  // UInt32
                    return DbType.UInt32;

                case "26":  // SByte
                    return DbType.SByte;

                case "27":  // Int16
                    return DbType.Int16;

                case "28":  // Int32
                    return DbType.Int32;

                case "29":  // Float
                    return DbType.Single;

                case "30":  // Double
                    return DbType.Double;

                default:
                    return DbType.String;
            }


            throw new NotImplementedException();
        }

        public override string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("{0}.{1}", DoubleQuoteIfNeeded(tableSchema), DoubleQuoteIfNeeded(tableName));
            else
                return string.Format("{0}", DoubleQuoteIfNeeded(tableName));
        }

        private string DoubleQuoteIfNeeded(string variable)
        {
            if (variable.IndexOf(' ') > -1)
                return string.Format("\"{0}\"", variable);
            else
                return variable;
        }

        #endregion

        #region ' Oracle SQL code: database objects '
        //
        // Oracle: find tables, views, procedures and database constrains
        //

        const string sqlTables =
            "SELECT " +
            "	NULL AS TABLE_CATALOG," +
            "	OWNER AS TABLE_SCHEMA," +
            "	TABLE_NAME," +
            "	DECODE(OWNER," +
            "		'SYS','SYSTEM TABLE'," +
            "		'SYSTEM','SYSTEM TABLE'," +
            "		'SYSMAN','SYSTEM TABLE'," +
            "		'CTXSYS','SYSTEM TABLE'," +
            "		'MDSYS','SYSTEM TABLE'," +
            "		'OLAPSYS','SYSTEM TABLE'," +
            "		'ORDSYS','SYSTEM TABLE'," +
            "		'OUTLN','SYSTEM TABLE'," +
            "		'WKSYS','SYSTEM TABLE'," +
            "		'WMSYS','SYSTEM TABLE'," +
            "		'XDB','SYSTEM TABLE'," +
            "		'ORDPLUGINS','SYSTEM TABLE'," +
            "	'TABLE') AS TABLE_TYPE," +
            "	NULL AS TABLE_GUID," +
            "	NULL AS DESCRIPTION," +
            "	NULL AS TABLE_PROPID," +
            "	NULL AS DATE_CREATED," +
            "	NULL AS DATE_MODIFIED " +
            "FROM SYS.ALL_TABLES " +
            "ORDER BY TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME";

        const string sqlViews =
            "SELECT " +
            "	NULL AS TABLE_CATALOG," +
            "	OWNER AS TABLE_SCHEMA," +
            "	VIEW_NAME AS TABLE_NAME," +
            "	DECODE(OWNER," +
            "		'SYS','SYSTEM VIEW'," +
            "		'SYSTEM','SYSTEM VIEW'," +
            "		'SYSMAN','SYSTEM VIEW'," +
            "		'CTXSYS','SYSTEM VIEW'," +
            "		'MDSYS','SYSTEM VIEW'," +
            "		'OLAPSYS','SYSTEM VIEW'," +
            "		'ORDSYS','SYSTEM VIEW'," +
            "		'OUTLN','SYSTEM VIEW'," +
            "		'WKSYS','SYSTEM VIEW'," +
            "		'WMSYS','SYSTEM VIEW'," +
            "		'XDB','SYSTEM VIEW'," +
            "		'ORDPLUGINS','SYSTEM VIEW'," +
            "	'VIEW') AS TABLE_TYPE," +
            "	NULL AS TABLE_GUID," +
            "	NULL AS DESCRIPTION," +
            "	NULL AS TABLE_PROPID," +
            "	NULL AS DATE_CREATED," +
            "	NULL AS DATE_MODIFIED " +
            "FROM SYS.ALL_VIEWS " +
            "ORDER BY TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME";

        const string sqlProcedures =
            "SELECT " +
            "	NULL AS SPECIFIC_CATALOG," +
            "	OWNER AS SPECIFIC_SCHEMA," +
            "	OBJECT_NAME AS SPECIFIC_NAME," +
            "	NULL AS ROUTINE_CATALOG," +
            "	OWNER AS ROUTINE_SCHEMA," +
            "	OBJECT_NAME AS ROUTINE_NAME," +
            "	DECODE(OWNER," +
            "		'SYS','SYSTEM PROCEDURE'," +
            "		'SYSTEM','SYSTEM PROCEDURE'," +
            "		'SYSMAN','SYSTEM PROCEDURE'," +
            "		'CTXSYS','SYSTEM PROCEDURE'," +
            "		'MDSYS','SYSTEM PROCEDURE'," +
            "		'OLAPSYS','SYSTEM PROCEDURE'," +
            "		'ORDSYS','SYSTEM PROCEDURE'," +
            "		'OUTLN','SYSTEM PROCEDURE'," +
            "		'WKSYS','SYSTEM PROCEDURE'," +
            "		'WMSYS','SYSTEM PROCEDURE'," +
            "		'XDB','SYSTEM PROCEDURE'," +
            "		'ORDPLUGINS','SYSTEM PROCEDURE'," +
            "	'PROCEDURE') AS ROUTINE_TYPE," +
            "	CREATED AS DATE_CREATED," +
            "	\"TIMESTAMP\" AS LAST_ALTERED " +
            "FROM SYS.ALL_OBJECTS " +
            "WHERE (OBJECT_TYPE = 'PROCEDURE') " +
            "ORDER BY ROUTINE_CATALOG,ROUTINE_SCHEMA,ROUTINE_NAME";

        const string sqlConstrains =
            "SELECT " +
            "	NULL AS PK_TABLE_CATALOG," +
            "	KCUUC.OWNER AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME," +
            "	NULL AS FK_TABLE_CATALOG," +
            "	KCUC.OWNER AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM ALL_CONSTRAINTS RC, ALL_CONS_COLUMNS KCUC, ALL_CONS_COLUMNS KCUUC " +
            "WHERE " +
            "	KCUC.OWNER = RC.OWNER AND" +
            "	KCUC.TABLE_NAME = RC.TABLE_NAME AND" +
            "	KCUC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME AND" +
            "	KCUC.OWNER= RC.OWNER AND" +
            "	KCUC.TABLE_NAME= RC.TABLE_NAME AND" +
            "	KCUUC.OWNER = RC.R_OWNER AND" +
            "	KCUUC.CONSTRAINT_NAME = RC.R_CONSTRAINT_NAME AND" +
            "	RC.CONSTRAINT_TYPE = 'R'";


        #endregion

    }


	// vistadb.net20

    public class VistaDBSchemaProvider : DbSchemaProvider
    {
        public VistaDBSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override string GetDatabaseName()
        {
            string DatabaseName = string.Empty;
            using (DbConnection _Connection = GetDBConnection())
            {
                Regex RegExp = new Regex(@"\\(?<db>[^\\]*)?\.vdb3$", RegexOptions.IgnoreCase);
                if (RegExp.IsMatch(_Connection.DataSource))
                {
                    Match found = RegExp.Matches(_Connection.DataSource)[0];
                    DatabaseName = found.Groups[1].Value;
                }
            }
            return DatabaseName;
        }

        public override System.Data.DataTable GetConstraints()
        {
            DataTable tbl = GetDTSchemaConstrains();
            using (DbConnection _Connection = GetDBConnection())
            {
                DataTable Constraints = _Connection.GetSchema("ForeignKeyColumns");
                foreach (DataRow contrainRow in Constraints.Rows)
                {
                    DataRow constrain = tbl.NewRow();
                    if (contrainRow["FKEY_TO_CATALOG"] != DBNull.Value)
                        constrain["PK_TABLE_CATALOG"] = contrainRow["FKEY_TO_CATALOG"];
                    if (contrainRow["FKEY_TO_SCHEMA"] != DBNull.Value)
                        constrain["PK_TABLE_SCHEMA"] = contrainRow["FKEY_TO_SCHEMA"];
                    constrain["PK_TABLE_NAME"] = contrainRow["FKEY_TO_TABLE"];
                    constrain["PK_COLUMN_NAME"] = contrainRow["FKEY_TO_COLUMN"];
                    if (contrainRow["TABLE_CATALOG"] != DBNull.Value)
                        constrain["FK_TABLE_CATALOG"] = contrainRow["TABLE_CATALOG"];
                    if (contrainRow["TABLE_SCHEMA"] != DBNull.Value)
                        constrain["FK_TABLE_SCHEMA"] = contrainRow["TABLE_SCHEMA"];
                    constrain["FK_TABLE_NAME"] = contrainRow["TABLE_NAME"];
                    constrain["FK_COLUMN_NAME"] = contrainRow["FKEY_FROM_COLUMN"];
                    constrain["FK_ORDINAL_POSITION"] = contrainRow["FKEY_FROM_ORDINAL_POSITION"];
                    constrain["FK_NAME"] = contrainRow["CONSTRAINT_NAME"];

                    tbl.Rows.Add(constrain);
                }
            }

            return tbl;
        }

        public override System.Data.DbType GetDbColumnType(string providerDbType)
        {
            throw new NotImplementedException();
        }

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }
            using (DbConnection _Connection = GetDBConnection())
            {
                DataTable tblViews = _Connection.GetSchema("Views");
                foreach (DataRow viewRow in tblViews.Rows)
                {
                    DataRow tblRow = tbl.NewRow();
                    if (viewRow["TABLE_CATALOG"] != DBNull.Value)
                        tblRow["TABLE_CATALOG"] = viewRow["TABLE_CATALOG"];
                    if (viewRow["TABLE_SCHEMA"] != DBNull.Value)
                        tblRow["TABLE_SCHEMA"] = viewRow["TABLE_SCHEMA"];
                    tblRow["TABLE_NAME"] = viewRow["TABLE_NAME"];
                    tblRow["TABLE_TYPE"] = "VIEW";

                    tbl.Rows.Add(tblRow);
                }
            }

            return tbl;
        }

        #endregion

    }
#>
