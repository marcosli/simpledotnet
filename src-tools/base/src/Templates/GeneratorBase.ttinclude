<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="Schema.Metadata.dll" #>

<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Schema.Metadata" #>
<#@ include file="..\Templates\T4Toolbox.ttinclude" #>
<#@ include file="..\Templates\TableTemplate.ttinclude" #>

<#+
public class GeneratorBase : Generator
{
	public GeneratorBase(TableTemplate template) 
	{
		ExcludedTables = new List<string>();
		IncludedTables = new List<string>();
		
		IncludedTables.Add("%");
		ExcludedTables.Add("SchemaInfo");
		
		Template = template;
		LazyLoad = true;
		NHibernateFilePath= @"Environment\Development\NHibernate.config";
		ApplicationFilePath =  @"Environment\Development\Application.config";
	}
	
    #region ' Properties '

	public TableTemplate Template { get; set; }
    public string ConnectionString { get; set ;}
    public string ProviderName { get; set; }
	public IList<string> IncludedTables { get; set; }
    public IList<string> ExcludedTables { get; set; }
	public string NHibernateFilePath { get; set; }
	public string ApplicationFilePath { get; set; }
	public bool LazyLoad { get; set; }
	
    public string AssemblyName
    {
        get { return TransformationContext.Project.Properties.Item("AssemblyName").Value.ToString(); }
    }

    #endregion

    protected override void RunCore()
    {
		this.ConnectionString = this.ConnectionString ?? GetNHConnectionString(NHibernateFilePath);
		this.ProviderName = this.ProviderName ?? GetMigrationProvider(ApplicationFilePath);
		
        var tables = new DbSchema(this.ProviderName, this.ConnectionString)
			.GetTables(IncludedTables, ExcludedTables);
			
        Template.AssemblyName = this.AssemblyName;
		Template.LazyLoad = this.LazyLoad;
        foreach (var table in tables)
        {
            Template.Table = table;
            Template.Render();
        }
    }
}
#>