<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" namespace="${namespace}.Domain">
  <class name="${namespace}.Domain.$classname, $contracts" table="$table.Name" schema="$table.Schema" #if (!$lazyload) lazy="false" #end>
#if ($count.Invoke($table.PrimaryKeyColumns) > 1)
        <composite-id>
    #foreach($field in $table.PrimaryKeysExceptFk)
          <key-property name="$re.NameFor($field)" column="$field.Name" />
    #end
    #foreach($field in $table.KeyManyToOneFields)
          <key-many-to-one name="$re.NameFor($field)">
    #foreach ($column in $field.Columns)
            <column name="$column.FkColumnRef.Name"/>
    #end
          </key-many-to-one>
    #end
        </composite-id>  
#else
    #foreach($field in $table.PrimaryKeysExceptFk)
        <id name="$re.NameFor($field)" column="$field.Name">
          <generator class="native" />
        </id>
    #end
    #foreach($field in $table.KeyManyToOneFields)
          <id name="$re.NameFor($field)">
    #foreach ($column in $field.Columns)
            <column name="$column.FkColumnRef.Name"/>
    #end
          <generator class="assigned" />
         </id>
    #end
#end
 
#foreach($field in $table.OrdinaryFields)
    <property name="$re.NameFor($field)">
      <column name="$field.Name" #if ($field.DataTypeName != "")sql-type="$field.DataTypeName" #end/>
    </property>
#end

#foreach($field in $table.NonKeyManyToOneFields)
    <many-to-one name="$re.NameFor($field)">
#foreach ($column in $field.Columns)
       <column name="$column.FkColumnRef.Name"/>
#end
    </many-to-one>
#end

#if ($lazyload)
#foreach ($field in $table.OneToManyFields)
    <set name="$re.NameFor($field)">
      <key>
#foreach ($column in $field.Columns)
        <column name="$column.FkColumnRef.Name" />
#end
      </key>
      <one-to-many class="${re.NameFor($field.FkTableRef)}" />
    </set>
#end
#end
  </class>
</hibernate-mapping>