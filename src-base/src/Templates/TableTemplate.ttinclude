<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
	public abstract class TableTemplate : Template
	{
        public string TableSchema { get; set; }
    	public string TableName { get; set; }
    	public string TableClassName { get; set; }
        public DbSchema Schema { get; set; }
    	public string AssemblyName { get; set; }
    	public DataTable TablePrimaryKeys { get; set; }
        public DataTable TableFields { get; set; }
        public DataTable TableOneToManyRelations { get; set; }
        public DataTable TableManyToOneRelations { get; set; }
        public DataTable TableManyToManyRelations { get; set; }
        public GeneratedTextTransformation Context { get; set; }
		
	    protected string TableNameHash(string tableSchema, string tableName)
		{
			if (!string.IsNullOrEmpty(tableSchema))
				return string.Format("{0}.{1}", tableSchema, tableName).ToLower();
			else
				return string.Format("{0}", tableName).ToLower();
		}
	
		protected string GetNHibernateType(string SystemType)
		{
			string classType = string.Empty;
			string[] nhibernateType = SystemType.Split('.');
			switch (nhibernateType[1])
			{
				case "Byte[]":
					classType = "BinaryBlob";
					break;
	
				case "DateTime":
				case "String":
				case "Boolean":
				case "Byte":
				case "Int16":
				case "Int32":
				case "Int64":
				case "Decimal":
				case "Double":
				case "Guid":
				case "Type":
					classType = nhibernateType[1];
					break;
	
				default:
					//throw new NotImplementedException("Not implemented type :" + SystemType);
					classType = SystemType;
					break;
			}
	
			return classType;
		}
	}
#>